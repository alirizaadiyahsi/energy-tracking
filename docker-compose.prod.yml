version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: energy-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-energy_tracking}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  influxdb:
    image: influxdb:2.7-alpine
    container_name: energy-influxdb-prod
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-energy-org}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-iot-data}
      DOCKER_INFLUXDB_INIT_RETENTION: ${INFLUXDB_RETENTION:-104w}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    ports:
      - "127.0.0.1:8086:8086"  # Bind to localhost only
    volumes:
      - influxdb_prod_data:/var/lib/influxdb2
      - influxdb_prod_config:/etc/influxdb2
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  redis:
    image: redis:7-alpine
    container_name: energy-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_prod_data:/data
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Message Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: energy-mosquitto-prod
    ports:
      - "1883:1883"
      - "8883:8883"  # SSL/TLS port
    volumes:
      - ./infrastructure/mosquitto/mosquitto.prod.conf:/mosquitto/config/mosquitto.conf:ro
      - ./infrastructure/mosquitto/passwd:/mosquitto/config/passwd:ro
      - ./infrastructure/mosquitto/certs:/mosquitto/certs:ro
      - mosquitto_prod_data:/mosquitto/data
      - mosquitto_prod_logs:/mosquitto/log
    networks:
      - energy-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Backend Services
  auth-service:
    build: 
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: energy-auth-service-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_EXPIRE_DAYS=${JWT_REFRESH_EXPIRE_DAYS:-7}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - WORKERS=4
      - BCRYPT_ROUNDS=12
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - LOCKOUT_DURATION_MINUTES=${LOCKOUT_DURATION_MINUTES:-15}
      - EMAIL_VERIFICATION_REQUIRED=${EMAIL_VERIFICATION_REQUIRED:-true}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: energy-api-gateway-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - AUTH_SERVICE_URL=http://auth-service:8005
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - WORKERS=4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  data-ingestion:
    build: 
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    container_name: energy-data-ingestion-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - AUTH_SERVICE_URL=http://auth-service:8005
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_started
      auth-service:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  data-processing:
    build: 
      context: ./services/data-processing
      dockerfile: Dockerfile
    container_name: energy-data-processing-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  analytics:
    build: 
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: energy-analytics-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  notification:
    build: 
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: energy-notification-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/6
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/7
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Worker Services
  celery-worker-processing:
    build: 
      context: ./services/data-processing
      dockerfile: Dockerfile
    command: celery -A app.celery worker --loglevel=info --concurrency=8
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  celery-worker-analytics:
    build: 
      context: ./services/analytics
      dockerfile: Dockerfile
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-energy-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-iot-data}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G
      replicas: 1
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  celery-beat:
    build: 
      context: ./services/data-processing
      dockerfile: Dockerfile
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-energy_tracking}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - energy-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: energy-frontend-prod
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL:-https://api.yourdomain.com}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL:-wss://api.yourdomain.com/ws}
      - REACT_APP_ENV=production
    networks:
      - energy-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      replicas: 2
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Monitoring & Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: energy-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3001}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: energy-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - frontend
      - grafana
    networks:
      - energy-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

volumes:
  postgres_prod_data:
    driver: local
  influxdb_prod_data:
    driver: local
  influxdb_prod_config:
    driver: local
  redis_prod_data:
    driver: local
  mosquitto_prod_data:
    driver: local
  mosquitto_prod_logs:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  energy-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
