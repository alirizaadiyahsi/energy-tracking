version: 1
disable_existing_loggers: false

formatters:
  json:
    format: '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "service": "%(name)s", "request_id": "%(request_id)s", "message": "%(message)s", "module": "%(module)s", "function": "%(funcName)s", "line": %(lineno)d}'
    datefmt: '%Y-%m-%dT%H:%M:%S'
  
  detailed:
    format: '%(asctime)s - %(name)s - %(levelname)s - [%(request_id)s] - %(pathname)s:%(lineno)d - %(funcName)s() - %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  simple:
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'

filters:
  request_id:
    (): libs.monitoring.RequestIDFilter

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: detailed
    stream: ext://sys.stdout
    filters: [request_id]
  
  file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: json
    filename: logs/service.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    filters: [request_id]
  
  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: json
    filename: logs/error.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    filters: [request_id]

loggers:
  uvicorn:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  uvicorn.access:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  fastapi:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  sqlalchemy.engine:
    level: WARNING
    handlers: [console, file]
    propagate: false

root:
  level: INFO
  handlers: [console, file, error_file]
