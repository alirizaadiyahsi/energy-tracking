name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        if [ -f tests/test-requirements.txt ]; then pip install -r tests/test-requirements.txt; fi
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff services/ tests/
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff services/ tests/
        
    - name: Run Flake8 (linting)
      run: |
        flake8 services/ tests/ --max-line-length=120 --extend-ignore=E203,W503 --exclude=__pycache__,*.pyc,.env
        
    - name: Run MyPy (type checking)
      run: |
        mypy services/ --ignore-missing-imports --no-strict-optional
        
    - name: Run Bandit (security linting)
      run: |
        bandit -r services/ -f json -o bandit-report.json || true
        bandit -r services/ --severity-level medium
        
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [auth-service, data-processing, analytics, api-gateway, data-ingestion, notification]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/test-requirements.txt
        
    - name: Run unit tests for ${{ matrix.service }}
      run: |
        python -m pytest tests/unit/${{ matrix.service }}/ \
          -v \
          --tb=short \
          --cov=services/${{ matrix.service }} \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=junit-${{ matrix.service }}.xml \
          --cov-fail-under=80
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests,${{ matrix.service }}
        name: unit-${{ matrix.service }}
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.service }}
        path: |
          junit-${{ matrix.service }}.xml
          htmlcov/
          coverage.xml

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: energy_tracking_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/test-requirements.txt
        
    - name: Wait for services
      run: |
        sleep 10
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/energy_tracking_test
        REDIS_URL: redis://localhost:6379/0
        TEST_ENVIRONMENT: ci
      run: |
        python -m pytest tests/integration/ \
          -v \
          --tb=short \
          --junitxml=junit-integration.xml \
          --maxfail=5
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: junit-integration.xml

  # Job 4: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/test-requirements.txt
        
    - name: Run security tests
      run: |
        python -m pytest tests/unit/ \
          -v \
          -m security \
          --tb=short \
          --junitxml=junit-security.xml
          
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: junit-security.xml

  # Job 5: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: frontend
      run: npm run type-check
      
    - name: Run frontend unit tests
      working-directory: frontend
      run: npm run test:coverage
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results.xml

  # Job 6: Build and Test Docker Images
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    strategy:
      matrix:
        service: [auth-service, data-processing, analytics, api-gateway, data-ingestion, notification]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        file: ./services/${{ matrix.service }}/Dockerfile
        push: false
        tags: energy-tracking/${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          energy-tracking/${{ matrix.service }}:test \
          python -c "import sys; print('Python version:', sys.version)"

  # Job 7: Generate Test Report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install report dependencies
      run: |
        pip install junitparser pytest-html
        
    - name: Generate combined test report
      run: |
        python .github/scripts/generate_test_report.py
        
    - name: Upload combined test report
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-report
        path: |
          test-report.html
          test-summary.json
          
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-summary.json')) {
            const summary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
            const body = `## 🧪 Test Results Summary
            
            | Test Type | Status | Passed | Failed | Skipped |
            |-----------|--------|--------|--------|---------|
            | Unit Tests | ${summary.unit.status} | ${summary.unit.passed} | ${summary.unit.failed} | ${summary.unit.skipped} |
            | Integration Tests | ${summary.integration.status} | ${summary.integration.passed} | ${summary.integration.failed} | ${summary.integration.skipped} |
            | Security Tests | ${summary.security.status} | ${summary.security.passed} | ${summary.security.failed} | ${summary.security.skipped} |
            | Frontend Tests | ${summary.frontend.status} | ${summary.frontend.passed} | ${summary.frontend.failed} | ${summary.frontend.skipped} |
            
            **Overall Status: ${summary.overall.status}**
            
            📊 [View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  # Job 8: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, frontend-tests, docker-build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Tests: ${{ needs.security-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "failure" || \
              "${{ needs.integration-tests.result }}" == "failure" || \
              "${{ needs.security-tests.result }}" == "failure" ]]; then
          echo "❌ Critical tests failed. Quality gate blocked."
          exit 1
        fi
        
        if [[ "${{ needs.frontend-tests.result }}" == "failure" || \
              "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "⚠️ Non-critical tests failed. Review required."
          exit 0
        fi
        
        echo "✅ All tests passed. Quality gate approved."
        
    - name: Update status check
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const description = state === 'success' ? 
            'All quality checks passed' : 
            'Quality checks failed - review required';
            
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'quality-gate'
          });
